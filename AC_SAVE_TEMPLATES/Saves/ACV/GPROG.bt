//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: GPROG.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: Armored Core V Game Progress Data
//  Category: Games
// File Mask: GPROG.DAT
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "EmblemImage.bt"
#include "Design.bt"
BigEndian();

enum <byte> MissionRank
{
    NotCompleted = -1,
    F = 0,
    E = 1,
    D = 2,
    C = 3,
    B = 4,
    A = 5,
    S = 6
};

enum <ubyte> WorkshopPartState
{
    NotEnabled = 1,
    NotPurchased = 2,
    Enabled = 4
};

enum <ubyte> Keybind
{
    LeftStickUp = 0,
    LeftStickDown = 1,
    LeftStickRight = 2,
    LeftStickLeft = 3,
    RightStickUp = 4,
    RightStickDown = 5,
    RightStickRight = 6,
    RightStickLeft = 7,
    Circle = 8,
    Triangle = 9,
    Square = 10,
    X = 11,
    L1 = 12,
    L2 = 13,
    R1 = 14,
    R2 = 15,
    L3 = 16,
    R3 = 17,
    Select = 18,
    Start = 19,
    ArrowUp = 20,
    ArrowDown = 21,
    ArrowRight = 22,
    ArrowLeft = 23,
    NotAssigned = 24
};

//------------------------------------------------

typedef struct
{
    Keybind forward;
    Keybind backward;
    Keybind moveRight;
    Keybind moveLeft;
    Keybind lookUp;
    Keybind lookDown;
    Keybind rotateRight;
    Keybind rotateLeft;
    Keybind jump;
    Keybind toggleBoost;
    Keybind highBoost;
    Keybind glideBoost;
    Keybind rightArmUnit;
    Keybind leftArmUnit;
    Keybind shoulderUnit;
    Keybind reconUnit;
    Keybind bayShift;
    Keybind purgeArmUnit;
    Keybind buzzer;
    Keybind textChat;
    Keybind menu;
    Keybind pause;
    Keybind changeMode;
    Keybind unk; // ?
} Keybinds;

typedef struct
{
    uint autoPurge : 1;
    uint autoBoost : 1;
    uint autoSighting : 1;
    uint subtitles : 1;
    uint reserved : 28;
} OptionsMask;

typedef struct
{
    ubyte unk00;
    ubyte vibrationFunction;
    ubyte unk02;
    ubyte unk03 <hidden=true>; Assert(unk03 == 0); // Padding?
    Keybinds keybinds;
    uint unk1C <hidden=true>; Assert(unk1C == 0); // Padding?
    uint unk20 <hidden=true>; Assert(unk20 == 0); // ?
    OptionsMask optionsMask <format=binary>; // Not sure if its this large or not
    uquad unk28 <hidden=true>; Assert(unk28 == 0); // Padding?
    uquad unk30 <hidden=true>; Assert(unk30 == 0); // Padding?
    uquad unk38 <hidden=true>; Assert(unk38 == 0); // Padding?
    uint unk40 <hidden=true>; Assert(unk40 == 0); // ?
    ubyte screenBrightness;
    ubyte unk45 <hidden=true>; Assert(unk45 == 0); // Padding?
    ubyte musicVolume;
    ubyte effectsVolume;
    ubyte voiceVolume;
    ubyte unk49;
    ubyte comVoice;
    ubyte unk4B <hidden=true>; Assert(unk4B == 0); // Padding?
    uint unk4C <hidden=true>; Assert(unk4C == 0); // Padding?
    ubyte gaugeShading;
    ubyte unk51;
    ubyte coloring;
    ubyte unk53 <hidden=true>; Assert(unk53 == 0); // Padding?
    ubyte unk54[56];
} Options <bgcolor=cLtRed>;

typedef struct
{
    ubyte unk00;
    ubyte unk01;
    ubyte unk02;
    ubyte unk03;
} Unk8C <bgcolor=cLtRed>;

typedef struct
{
    uint unk00;
    ubyte unk04[68] <bgcolor=cBlack>;
} Unk90 <bgcolor=cRed>;

typedef struct
{
    Unk90 unk90s[66];
    Unk90 reserved[80 - 66];
} Unk90s;

typedef struct
{
    short missionID;
    MissionRank rank;
    ubyte unk03 <hidden=true>; Assert(unk03 == 0);
    uint unk04 <hidden=true>; Assert(unk04 == 0);
    uquad subquestMask <format=binary>;
    ubyte subquestCount;
    ubyte unk11 <hidden=true>; Assert(unk11 == 0);
    ubyte unk12 <hidden=true>; Assert(unk12 == 0);
    ubyte unk13 <hidden=true>; Assert(unk13 == 0);
    uquad unk14 <hidden=true>; Assert(unk14 == 0);
    uquad unk1C <hidden=true>; Assert(unk1C == 0);
    uint unk24 <hidden=true>; Assert(unk24 == 0);
} Mission <bgcolor=cDkRed, read=ReadMission, optimize=false>;

string ReadMission(Mission& mission)
{
    local string str <hidden=true>;
    return SPrintf(str, "%d %s", mission.missionID, EnumToString(mission.rank));
}

typedef struct
{
    ushort id;
    ubyte category;
    ubyte unk03 <hidden=true>; Assert(unk03 == 0); // Padding?
} Emblem <bgcolor=cLtGreen, read=ReadEmblem, optimize=false>;

string ReadEmblem(Emblem& emblem)
{
    local string str <hidden=true>;
    return SPrintf(str, "%d [%d]", emblem.id, emblem.category);
}

typedef struct
{
    int count;
    Emblem emblems[count];
    Emblem reserved[2048 - count];
} Emblems <bgcolor=cLtGreen>;

typedef struct
{
    ushort id;
    WorkshopPartState state;
    ubyte unk03 <hidden=true>; // Padding?
} WorkshopPart <bgcolor=cLtYellow, optimize=false>;

typedef struct
{
    int workshopCount;
    int partCount;
    WorkshopPart workshops[workshopCount];
    WorkshopPart reservedWorkshops[32 - workshopCount];
    WorkshopPart parts[partCount];
    WorkshopPart reservedParts[2048 - partCount];
} Workshops <bgcolor=cLtYellow>;

typedef struct
{
    int unk00;
    int currentWorkshop;
    int unk04 <hidden=true>; Assert(unk04 == 0); // ?
    uquad enabledPartsMask <format=binary>;
} WorkshopInfo <bgcolor=cLtYellow>;

typedef struct
{
    wchar_t name[32];
    short unk40;
    ubyte unk42;
    ubyte unk43;
    uint unk44;
    float unk48;
    uint unk4C;
} Unk74B0 <bgcolor=cYellow>;

typedef struct
{
    ubyte category;
    ubyte unk01;
    ushort partID;
    uint unk04 <format=hex>;
    uquad tuneID <format=hex>; // Not sure what exactly this is supposed to be, might just be a random number.
    wchar_t owner[16]; // Not sure about this size
    uint unk30;
    ushort unk34;
    ubyte current_grow_count;
    ubyte max_grow_count;
    float en_consumption_during_use;
    float attack_power;
    ushort impact_force;
    ushort reload_time;
    ubyte unk44;
    ubyte unk45;
    ushort muzzle_velocity;
    ushort optimal_range;
    ushort base_lock_on_time;
    uint unk4C;
    ushort unk50;
    ushort unk52;
    ushort explosive_force;
    ushort unk56;
} GrowPart <bgcolor=cDkYellow, read=ReadGrowPart>;

string ReadGrowPart(GrowPart& part)
{
    local string str <hidden=true>;
    return SPrintf(str, "[%d] <%0x> %4d %s", part.category, part.tuneID, part.partID, part.owner);
}

typedef struct
{
    char fourcc[4];
    int unk04;
    int count;
    int unk0C;
    GrowPart parts[count];
    GrowPart reserved[1000 - count];
} Grow <bgcolor=cDkYellow>;

typedef struct
{
    uint unk00;
    ushort unk04;
    ubyte unk06;
    ubyte unk07;
    uint unk08;
    uint unk0C;
} Unk1CCD0;

typedef struct
{
    ubyte unk00[32];
    uint unk20;
    uint unk24;
    ubyte count;
    ubyte unk29;
    ubyte unk2A;
    ubyte unk2B;
    uint unk2C;
    Unk1CCD0 unk1CCD0s[count];
    Unk1CCD0 reserved[50 - count];
} Unk1CCD0s;

typedef struct
{
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    wchar_t online_comment[36]; // Not sure about this size
    int unk74; // Not sure if this is a part of the comment
} OnlinePlayer;

typedef struct
{
    wchar_t name[32];
    uint au_count;
    uint unk3C;
    float play_time_seconds;
    uint unk44;
} Player <bgcolor=cGreen, read=ReadPlayer>;

string ReadPlayer(Player& player)
{
    local string str;
    float hours = player.play_time_seconds / 3600;
    float minutes = (player.play_time_seconds / 60) % 60;
    float seconds = player.play_time_seconds % 60;
    return SPrintf(str, "Name: %s | Au: %i | Playtime: %2i : %2i : %2i", player.name, player.au_count, hours, minutes, seconds);
}

typedef struct
{
    ubyte category;
    ubyte unk01 <format=binary>;
    ushort partID;
    int unk04;
    uquad tuneID <format=hex>; // Not sure what exactly this is supposed to be, might just be a random number.
} OwnedPart <bgcolor=cDkGreen, read=ReadOwnedPart>;

string ReadOwnedPart(OwnedPart& part)
{
    local string str <hidden=true>;
    return SPrintf(str, "[%d] <%d> %d", part.category, part.unk01, part.partID);
}

typedef struct
{
    int count;
    int unk04;
    OwnedPart parts[count];
    OwnedPart reserved[1500 - count];
} OwnedParts <bgcolor=cLtBlue>;

typedef struct
{
    ubyte unk00[12] <bgcolor=cBlack>;
    uint unk0C;
} Unk2D540 <bgcolor=cBlue>;

typedef struct
{
    ubyte unk00[32];
    uquad unk20;
    wchar_t team_name[64]; // Not sure about this size
    EmblemImage team_emblem;
    uint team_points_num;
    uint unk7BC;
    uquad team_points_bar;
    uint teamID;
    uint teamLevel;
    uquad team_points_bar_min;
    uquad team_points_bar_max;
    ubyte unk7E0[328];
} Team <bgcolor=cDkBlue>;

//------------------------------------------------

Options oset;
Unk8C unk8C;
Unk90s unk90s;
Mission missions[160];
ubyte unk3010[1024] <bgcolor=cBlack>;
Emblems emblems;
Workshops workshops;
WorkshopInfo workshopInfo;
Unk74B0 unk74B0;
Grow grow;
Unk1CCD0s unk1CCD0s;
OnlinePlayer online_player_data;
Design online_acdes;
Player pdata;
OwnedParts ownedParts;
Unk2D540 unk2D540;
Design acdes;

Team team;
uquad last_save_time;